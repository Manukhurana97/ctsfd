Spring : Application framework






1) @RestController: (@Controller + @RequestBody) -> Restfull webservice-> return data and 			    object data written into Http as json or xml.Its used in class level

2) @Controller: create a map of a model object. Make a class as a controller 

3) @Repository: used with crud operation in (dao) layer while dealing with the database.It 			automatically handle the exception   
	
4) @service: donate class provide some service (utility class) (@service<->@component)

5) @component: make java class as bean class
	       Component
6) @SpringbootApplication: Starting point of the application

7) @spring class path: when code run , check for annotation and treat as such.

8) @RequestMapping : Its used in class level and method level, Map web request with specific class 			     or method handler (default -> get )

9) @PathVariable: expected argumant is a variable in path

10) @RequestBody: Used with post method to get the data/ bind the incoming response body 
		  (Uses Httpmessageconvertor to convert http to specific object) 

11) @ResponseBody: bind the return value to the http response


12) @Entity: Create table with class name

13) @data: act as a lombok(setter, getter, toString....)

14) @Id: create primary key in table.

15) @Autowired: is used for constructor and setter/ getter level injection.

16) @Bean: To Declared a bean.(Bean:-> java bean is a java class with private method with public 		   getter ans setter) implements serializable: converting the state of an object into a 						       byte stream
	-> bean must be public with no args constructor

17) @configure: class declare one or more @bean method 

18) @generativetype:

jwt: Json web token
Jpa : Java Persistence Api: Let you to perform orm {map (entity class) <--> (sql table)}



Spring Boot MicroService:

3

-> single deployable software
	broken down in small grains
	small domain can be deploy independently
	lightweight communication protocols ie HTTP or JSON
	Technilogy neutral protocol 

ESB(Enterprice Service Bus)

2) Spring boot and Spring Cloud 

-> Flow {Architecture}
	
	User(call/response) --> {cloud [(Route Mapping) -> (parameter Destructing) -> (Json->Json Object mapping) -> (Business Logic execution) -> (Java-> JSon object mapping) ]}

	Flexible
	scalable
	
3) challanges of MS
	Location transparency
	Resilient(Service  should be fail fast)
	Repetable(Ensure that every time new instance start it has same configration )
	Scalable
	Right-sized

4) Routing Pattern (zull, eureka ->(service Discovery))
	to ensure every we have save conf(same port no  etc.....)




Spring cloud version : Hoxton.SR1	
port : 8761

@EnableEurekaServer (dependency)

eureka.client.register-with-eureka: (otherwise treated as microservices)

BootStrap.yml: Initialized first(more priority then application.yml)

Admin-Server: create a admin server (dependency -Springbootadmin server)
@EnableAdminServer


Starter-feign


