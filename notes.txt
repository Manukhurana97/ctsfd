Spring : Application framework






1) @RestController: (@Controller + @RequestBody) -> Restfull webservice-> return data and 			    object data written into Http as json or xml.Its used in class level

2) @Controller: create a map of a model object. Make a class as a controller 

3) @Repository: used with crud operation in (dao) layer while dealing with the database.It 			automatically handle the exception   
	
4) @service: donate class provide some service (utility class) (@service<->@component)

5) @component: make java class as bean class
	       Component
6) @SpringbootApplication: Starting point of the application

7) @spring class path: when code run , check for annotation and treat as such.

8) @RequestMapping : Its used in class level and method level, Map web request with specific class 			     or method handler (default -> get )

9) @PathVariable: expected argumant is a variable in path

10) @RequestBody: Used with post method to get the data/ bind the incoming response body 
		  (Uses Httpmessageconvertor to convert http to specific object) 

11) @ResponseBody: bind the return value to the http response


12) @Entity: Create table with class name

13) @data: act as a lombok(setter, getter, toString....)

14) @Id: create primary key in table.

15) @Autowired: is used for constructor and setter/ getter level injection.

16) @Bean: To Declared a bean.(Bean:-> java bean is a java class with private method with public 		   getter ans setter) implements serializable: converting the state of an object into a 						       byte stream
	-> bean must be public with no args constructor

17) @configure: class declare one or more @bean method 

18) @generativetype:

jwt: Json web token
Jpa : Java Persistence Api: Let you to perform orm {map (entity class) <--> (sql table)}



Spring Boot MicroService:

3
