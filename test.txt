<div class="file-upload-container" (drop)="onFileDrop($event)" (dragover)="onDragOver($event)" (dragleave)="onDragLeave($event)">
    <div class="file-upload">
        <input type="file" (change)="onFileSelected($event)" />
        <p>Drag and drop files here or click to upload</p>
        <button (click)="uploadFile()">Upload</button>
    </div>
</div>



.file-upload-container {
    width: 300px;
    height: 200px;
    border: 2px dashed #ddd;
    border-radius: 5px;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
}

.file-upload {
    display: flex;
    flex-direction: column;
    align-items: center;
}

.file-upload p {
    margin-top: 10px;
}

.file-upload button {
    margin-top: 10px;
    background-color: #4caf50;
    color: white;
    border: none;
    padding: 8px 16px;
    border-radius: 4px;
    cursor: pointer;
}

.file-upload button:hover {
    background-color: #45a049;
}

.file-upload input[type="file"] {
    display: none;
}


-------------------------------------------------------------------------------------------------------------------------------------------------------


<div class="drop-zone" (click)="handleClick($event)" (dragover)="handleDragOver($event)"
  (dragleave)="handleDragLeave($event)" (drop)="handleDrop($event)">
  <span class="drop-zone__prompt" *ngIf="!thumbnailElement">Drop file here or click to upload</span>
  <div class="drop-zone__thumb" *ngIf="thumbnailElement" [style.backgroundImage]="thumbnailStyle"></div>
  <input type="file" name="myFile" class="drop-zone__input" (change)="handleFileChange($event)">
</div>




import { Component } from '@angular/core';

@Component({
  selector: 'app-drop-zone',
  templateUrl: './drop-zone.component.html',
  styleUrls: ['./drop-zone.component.css']
})
export class DropZoneComponent {
  thumbnailElement: HTMLElement | null = null;
  thumbnailStyle: string | null = null;

  handleClick(event: Event): void {
    const inputElement = event.target as HTMLInputElement;
    inputElement.click();
  }

  handleFileChange(event: Event): void {
    const inputElement = event.target as HTMLInputElement;
    const file = inputElement.files?.[0];
    if (file) {
      this.updateThumbnail(file);
    }
  }

  handleDragOver(event: DragEvent): void {
    event.preventDefault();
    const dropZoneElement = event.currentTarget as HTMLElement;
    dropZoneElement.classList.add("drop-zone--over");
  }

  handleDragLeave(event: DragEvent): void {
    const dropZoneElement = event.currentTarget as HTMLElement;
    dropZoneElement.classList.remove("drop-zone--over");
  }

  handleDrop(event: DragEvent): void {
    event.preventDefault();
    const dropZoneElement = event.currentTarget as HTMLElement;
    const file = event.dataTransfer?.files?.[0];
    if (file) {
      const inputElement = dropZoneElement.querySelector('.drop-zone__input') as HTMLInputElement;
      inputElement.files = event.dataTransfer?.files;
      this.updateThumbnail(file);
    }
    dropZoneElement.classList.remove("drop-zone--over");
  }

  updateThumbnail(file: File): void {
    if (this.thumbnailElement) {
      this.thumbnailElement.remove();
      this.thumbnailElement = null;
    }

    const dropZoneElement = document.querySelector('.drop-zone') as HTMLElement;
    if (!dropZoneElement) return;

    const thumbnailElement = document.createElement("div");
    thumbnailElement.classList.add("drop-zone__thumb");
    thumbnailElement.dataset.label = file.name;
    dropZoneElement.appendChild(thumbnailElement);
    this.thumbnailElement = thumbnailElement;

    if (file.type.startsWith("image/")) {
      const reader = new FileReader();
      reader.readAsDataURL(file);
      reader.onload = () => {
        this.thumbnailStyle = `url('${reader.result}')`;
      };
    } else {
      this.thumbnailStyle = null;
    }
  }
}
